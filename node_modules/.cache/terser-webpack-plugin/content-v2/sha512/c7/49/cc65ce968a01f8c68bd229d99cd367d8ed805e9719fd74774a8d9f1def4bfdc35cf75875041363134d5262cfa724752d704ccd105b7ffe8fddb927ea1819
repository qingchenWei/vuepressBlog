{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[55],{561:function(s,t,a){\"use strict\";a.r(t);var r=a(4),e=Object(r.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[a(\"div\",{staticClass:\"custom-block tip\"},[a(\"p\",{staticClass:\"custom-block-title\"},[s._v(\"Abstract\")]),s._v(\" \"),a(\"ol\",[a(\"li\",[s._v(\"常见的 web 安全及防护措施\")])])]),s._v(\" \"),a(\"h2\",{attrs:{id:\"说说你所知道的web安全及防护措施\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#说说你所知道的web安全及防护措施\"}},[s._v(\"#\")]),s._v(\" 说说你所知道的web安全及防护措施\")]),s._v(\" \"),a(\"p\",[s._v(\"常用攻击手段：SQL注入、XSS(Cross Site Script)，跨站脚本攻击、CSRF(Cross Site Request Forgery)，跨站点伪造请求\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_1-xss\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-xss\"}},[s._v(\"#\")]),s._v(\" （1）XSS\")]),s._v(\" \"),a(\"p\",[s._v(\"xss: 跨站脚本攻击（Cross Site Scripting）是最常见和基本的攻击 WEB 网站方法，攻击者通过注入非法的 html 标签或者 javascript 代码，从而当用户浏览该网页时，控制用户浏览器。\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"一-类别-三种\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一-类别-三种\"}},[s._v(\"#\")]),s._v(\" (一) 类别（三种）\")]),s._v(\" \"),a(\"h5\",{attrs:{id:\"dom-xss\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#dom-xss\"}},[s._v(\"#\")]),s._v(\" DOM xss :\")]),s._v(\" \"),a(\"p\",[s._v(\"DOM即文本对象模型，使用DOM可以允许程序和脚本动态的访问和更新文档的内容、结构和样式。这种方式不需要服务器解析响应的直接参与，触发XSS靠的是浏览器端的DOM解析，可以认为完全是客户端的事情。\")]),s._v(\" \"),a(\"h5\",{attrs:{id:\"反射型-xss\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#反射型-xss\"}},[s._v(\"#\")]),s._v(\" 反射型 xss :\")]),s._v(\" \"),a(\"p\",[s._v(\"反射型XSS也被称为非持久性XSS，是现在最容易出现的一种XSS漏洞。发出请求时，XSS代码出现在URL中，最后输入提交到服务器，服务器解析后在响应内容中出现这段XSS代码，最后浏览器解析执行。\")]),s._v(\" \"),a(\"h5\",{attrs:{id:\"存储型-xss\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#存储型-xss\"}},[s._v(\"#\")]),s._v(\" 存储型 Xss\")]),s._v(\" \"),a(\"p\",[s._v(\"存储型XSS又被称为持久性XSS，它是最危险的一种跨站脚本，相比反射型XSS和DOM型XSS具有更高的隐蔽性，所以危害更大，它不需要用户手动触发。 当攻击者提交一段XSS代码后，被服务器端接收并存储，当所有浏览者访问某个页面时都会被XSS，其中最典型的例子就是留言板。\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"二-xss危害\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二-xss危害\"}},[s._v(\"#\")]),s._v(\" （二） Xss危害\")]),s._v(\" \"),a(\"p\",[s._v(\"利用虚假输入表单骗取用户个人信息。\\n利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求。\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"三-抵御xss危害\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三-抵御xss危害\"}},[s._v(\"#\")]),s._v(\" （三） 抵御Xss危害\")]),s._v(\" \"),a(\"p\",[s._v(\"httpOnly: 在 cookie 中设置 HttpOnly 属性，使js脚本无法读取到 cookie 信息。\\n前端负责输入检查，后端也要做相同的过滤检查。\\n某些情况下，不能对用户数据进行严格过滤时，需要对标签进行转换\")]),s._v(\" \"),a(\"h3\",{attrs:{id:\"_2-csrf\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-csrf\"}},[s._v(\"#\")]),s._v(\" （2） CSRF\")]),s._v(\" \"),a(\"p\",[s._v(\"跨站点请求伪造（Cross-Site Request Forgeries），冒充用户发起请求（在用户不知情的情况下）， 完成一些违背用户意愿的事情（如修改用户信息，删初评论等）。\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_1、可能造成危害\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1、可能造成危害\"}},[s._v(\"#\")]),s._v(\" 1、可能造成危害：\")]),s._v(\" \"),a(\"p\",[s._v(\"利用已通过认证的用户权限更新设定信息等；\\n利用已通过认证的用户权限购买商品；\\n利用已通过的用户权限在留言板上发表言论。\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"_2、防御\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2、防御\"}},[s._v(\"#\")]),s._v(\" 2、防御：\")]),s._v(\" \"),a(\"p\",[s._v(\"验证码；强制用户必须与应用进行交互，才能完成最终请求。\\n尽量使用 post ，限制 get 使用；get 太容易被拿来做 csrf 攻击；\\n请求来源限制，此种方法成本最低，但是并不能保证 100% 有效，因为服务器并不是什么时候都能取到 Referer，而且低版本的浏览器存在伪造 Referer 的风险。\\ntoken 验证 CSRF 防御机制是公认最合适的方案。\")]),s._v(\" \"),a(\"h4\",{attrs:{id:\"使用token的原理\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#使用token的原理\"}},[s._v(\"#\")]),s._v(\" 使用token的原理：\")]),s._v(\" \"),a(\"h5\",{attrs:{id:\"第一步\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第一步\"}},[s._v(\"#\")]),s._v(\" 第一步：\")]),s._v(\" \"),a(\"p\",[s._v(\"后端随机产生一个 token，把这个token 保存到 session 状态中；同时后端把这个token 交给前端页面；\")]),s._v(\" \"),a(\"h5\",{attrs:{id:\"第二步\"}},[a(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#第二步\"}},[s._v(\"#\")]),s._v(\" 第二步：\")]),s._v(\" \"),a(\"p\",[s._v(\"前端页面提交请求时，把 token 加入到请求数据或者头信息中，一起传给后端；\\n后端验证前端传来的 token 与 session 是否一致，一致则合法，否则是非法请求。\")])])}),[],!1,null,null,null);t.default=e.exports}}]);","extractedComments":[]}