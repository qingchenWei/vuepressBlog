(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{516:function(t,e,s){"use strict";s.r(e);var a=s(4),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Abstract")]),t._v(" "),s("ol",[s("li",[t._v("数据代理")]),t._v(" "),s("li",[t._v("双向绑定")]),t._v(" "),s("li",[t._v("监听数组变化")])])]),t._v(" "),s("h2",{attrs:{id:"前言"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[t._v("#")]),t._v(" 前言")]),t._v(" "),s("p",[t._v("最近在学习vue框架的基本原理，看了一些技术博客以及一些对vue源码的简单实现，对数据代理、数据劫持、模板解析、变异数组方法、双向绑定有了更深的理解。于是乎，尝试着去实践自己学到的知识，用vue的一些基本原理实现一个"),s("code",[t._v("简单的todo-list")]),t._v("，完成对深度复杂对象的双向绑定以及对数组的监听，加深了对vue基本原理的印象。")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("github地址："),s("a",{attrs:{href:"https://github.com/FatDong1/vueTodoDemo",target:"_blank",rel:"noopener noreferrer"}},[t._v("todo-list"),s("OutboundLink")],1)]),t._v(" "),s("li",[t._v("在线预览： "),s("a",{attrs:{href:"https://fatdong1.github.io/todo-list/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://fatdong1.github.io/to..."),s("OutboundLink")],1)])])]),t._v(" "),s("h3",{attrs:{id:"学习链接"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#学习链接"}},[t._v("#")]),t._v(" 学习链接")]),t._v(" "),s("p",[t._v("前排感谢以下文章，对我理解vue的基本原理有很大的帮助！")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/DMQ/mvvm",target:"_blank",rel:"noopener noreferrer"}},[t._v("剖析vue实现原理，自己动手实现mvvm"),s("OutboundLink")],1),t._v(" by DMQ")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/youngwind/blog",target:"_blank",rel:"noopener noreferrer"}},[t._v("对vue早期源码的理解"),s("OutboundLink")],1),t._v(" by 梁少峰")])]),t._v(" "),s("h3",{attrs:{id:"实现效果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实现效果"}},[t._v("#")]),t._v(" 实现效果")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s1.ax1x.com/2020/08/07/aRsojS.png",alt:"aRsojS.png"}})]),t._v(" "),s("h3",{attrs:{id:"数据代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据代理"}},[t._v("#")]),t._v(" 数据代理")]),t._v(" "),s("h4",{attrs:{id:"_1-简单介绍数据代理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-简单介绍数据代理"}},[t._v("#")]),t._v(" 1.简单介绍数据代理")]),t._v(" "),s("p",[t._v("正常情况下，我们都会把数据写在data里面，如下面所示")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var vm = new Vue({\n    el: '#app',\n    data: {\n        title: 'hello world'\n    }\n    methods: {\n        changeTitle: function () {\n            this.title = 'hello vue'\n        }\n    }\n})\nconsole.log(vm.title) // 'hello world' or 'hello vue'\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br")])]),s("p",[t._v("如果没有"),s("code",[t._v("数据代理")]),t._v("，而我们又要修改data里面的title的话，methods里面的changeTitle只能这样修改成"),s("code",[t._v("this.data.title = 'hello vue'")]),t._v(", 下面的console也只能改成"),s("code",[t._v("console.log(vm.data.title)")]),t._v("，数据代理就是这样的功能。")]),t._v(" "),s("h4",{attrs:{id:"_2-实现原理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-实现原理"}},[t._v("#")]),t._v(" 2. 实现原理")]),t._v(" "),s("p",[t._v("通过遍历data里面的属性，将每个属性通过object.defineProperty()设置getter和setter，将data里面的每个属性都复制到与data同级的对象里。")]),t._v(" "),s("p",[t._v("(对应上面的示例代码)")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s1.ax1x.com/2020/08/07/aRs7ng.png",alt:"aRs7ng.png"}})]),t._v(" "),s("p",[t._v("触发这里的getter将会触发data里面对应属性的getter，触发这里的setter将会触发data里面对应属性的setter，从而实现代理。实现代码如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("var self = this;   // this为vue实例， 即vm\nObject.keys(this.data).forEach(function(key) {\n    Object.defineProperty(this, key, {    // this.title, 即vm.title\n        enumerable: false,\n        configurable: true,\n        get: function getter () {\n            return self.data[key];   //触发对应data[key]的getter\n        },\n        set: function setter (newVal) {\n            self.data[key] = newVal;  //触发对应data[key]的setter\n        }\n    });\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br")])]),s("blockquote",[s("p",[t._v("对object.defineProperty不熟悉的小伙伴可以在"),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty",target:"_blank",rel:"noopener noreferrer"}},[t._v("MDN的文档(链接)"),s("OutboundLink")],1),t._v("学习一下")])]),t._v(" "),s("h3",{attrs:{id:"双向绑定"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双向绑定"}},[t._v("#")]),t._v(" 双向绑定")]),t._v(" "),s("ul",[s("li",[t._v("数据变动 ---\x3e 视图更新")]),t._v(" "),s("li",[t._v("视图更新(input、textarea) --\x3e 数据变动")])]),t._v(" "),s("p",[s("code",[t._v("视图更新 --\x3e 数据变动")]),t._v("这个方向的绑定比较简单，主要通过事件监听来改变数据，比如input可以监听input事件，一旦触发input事件就改变data。下面主要来理解一下"),s("code",[t._v("数据变动---\x3e视图更新")]),t._v("这个方向的绑定。")]),t._v(" "),s("h4",{attrs:{id:"_1-数据劫持"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据劫持"}},[t._v("#")]),t._v(" 1. 数据劫持")]),t._v(" "),s("p",[t._v("不妨让我们自己思考一下，如何实现数据变动，对应绑定数据的视图就更新呢？")]),t._v(" "),s("p",[t._v("答案还是object.defineProperty，通过object.defineProperty遍历设置this.data里面所有属性，在每个属性的setter里面去通知对应的回调函数，这里的回调函数包括dom视图重新渲染的函数、使用$watch添加的回调函数等，这样我们就通过object.defineProperty劫持了数据，当我们对数据重新赋值时，如"),s("code",[t._v("this.title = 'hello vue'")]),t._v(",就会触发setter函数，从而触发dom视图重新渲染的函数，实现数据变动，对应视图更新。")]),t._v(" "),s("h4",{attrs:{id:"_2-发布-订阅模式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-发布-订阅模式"}},[t._v("#")]),t._v(" 2. 发布-订阅模式")]),t._v(" "),s("p",[t._v("那么问题来了，我们如何在setter里面触发所有绑定该数据的回调函数呢？")]),t._v(" "),s("p",[t._v("既然绑定该数据的回调函数不止一个，我们就把所有的回调函数放在一个数组里面，一旦触发该数据的setter，就遍历数组触发里面所有的回调函数，我们把这些回调函数称为"),s("code",[t._v("订阅者")]),t._v("。数组最好就定义在setter函数的最近的上级作用域中，如下面实例代码所示。")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Object.keys(this.data).forEach(function(key) {\n    var subs = [];  // 在这里放置添加所有订阅者的数组\n    Object.defineProperty(this.data, key, {    // this.data.title\n        enumerable: false,\n        configurable: true,\n        get: function getter () {\n            console.log('访问数据啦啦啦')\n            return this.data[key];   //返回对应数据的值\n        },\n        set: function setter (newVal) {\n            if (newVal === this.data[key]) {   \n                return;    // 如果数据没有变动，函数结束，不执行下面的代码\n            }\n            this.data[key] = newVal;  //数据重新赋值\n            \n            subs.forEach(function () {\n                // 通知subs里面的所有的订阅者\n            })\n        }\n    });\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br")])]),s("p",[t._v("那么问题又来了，怎么把绑定数据的所有回调函数放到一个数组里面呢？")]),t._v(" "),s("p",[t._v("我们可以在getter里面做做手脚，我们知道只要访问数据就会触发对应数据的getter，那我们可以先设置一个全局变量target，如果我们要在data里面title属性添加一个订阅者(changeTitle函数)，我们可以先设置target = changeTitle，把changeTitle函数缓存在target中，然后访问this.title去触发title的getter，在getter里面把target这个全局变量的值添加到subs数组里面，添加完成后再把全局变量target设置为null，以便添加其他订阅者。实例代码如下：")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("Object.keys(this.data).forEach(function(key) {\n    var subs = [];  // 在这里放置添加所有订阅者的数组\n    Object.defineProperty(this.data, key, {    // this.data.title\n        enumerable: false,\n        configurable: true,\n        get: function getter () {\n            console.log('访问数据啦啦啦')\n            if (target) {\n                subs.push(target);                \n            }\n            return this.data[key];   //返回对应数据的值\n        },\n        set: function setter (newVal) {\n            if (newVal === this.data[key]) {   \n                return;    // 如果数据没有变动，函数结束，不执行下面的代码\n            }\n            this.data[key] = newVal;  //数据重新赋值\n            \n            subs.forEach(function () {\n                // 通知subs里面的所有的订阅者\n            })\n        }\n    });\n}\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br")])]),s("p",[t._v("上面的代码为了方便理解都是通过简化的，实际上我们把订阅者写成一个构造函数watcher，在实例化订阅者的时候去访问对应的数据，触发相应的getter，详细的代码可以阅读"),s("a",{attrs:{href:"https://github.com/DMQ/mvvm",target:"_blank",rel:"noopener noreferrer"}},[t._v("DMQ的自己动手实现MVVM"),s("OutboundLink")],1)]),t._v(" "),s("h4",{attrs:{id:"_3-模板解析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-模板解析"}},[t._v("#")]),t._v(" 3. 模板解析")]),t._v(" "),s("p",[t._v("通过上面的两个步骤我们已经实现一旦数据变动，就会通知对应绑定数据的订阅者，接下来我们来简单介绍一个特殊的订阅者，也就是视图更新函数，几乎每个数据都会添加对应的视图更新函数，所以我们就来简单了解一下视图更新函数。")]),t._v(" "),s("p",[t._v("假如说有下面这一段代码，我们怎么把它解析成对应的html呢？")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('<input v-model="title">\n<h1>{{title}}</h1>\n<button v-on:click="changeTitle">change title<button>\n')])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br")])]),s("p",[t._v("先简单介绍视图更新函数的用途，\n比如解析指令"),s("code",[t._v('v-model="title"')]),t._v(","),s("code",[t._v('v-on:click="changeTitle"')]),t._v(",还有把"+t._s(t.title)+"替换为对应的数据等。")]),t._v(" "),s("p",[t._v("回到上面那个问题，如何解析模板？我们只要去遍历所有dom节点包括其子节点，")]),t._v(" "),s("ul",[s("li",[t._v("如果节点属性含有"),s("code",[t._v("v-model")]),t._v("，视图更新函数就为把input的value设置为title的值")]),t._v(" "),s("li",[t._v("如果节点为文本节点，视图更新函数就为先用正则表达式取出大括号里面的值'title'，再设置文本节点的值为data['title']")]),t._v(" "),s("li",[t._v("如果节点属性含有"),s("code",[t._v("v-on:xxxx")]),t._v("，视图更新函数就为先用正则获取事件类型为click，然后获取该属性的值为changeTitle，则事件的回调函数为this.methods['changeTitle']，接着用addEventListener监听节点click事件。")])]),t._v(" "),s("p",[t._v("我们要知道视图更新函数也是data对应属性的订阅者，如果不知道如何触发视图更新函数，可以把上面的发布-订阅模式再看一遍。")]),t._v(" "),s("p",[t._v("可能有的小伙伴可能还有个疑问，如何实现input节点的值变化后，下面的h1节点的title值也发生变化？在遍历所有节点后，如果节点含有属性"),s("code",[t._v("v-model")]),t._v("，就用addEventListener监听input事件，一旦触发input事件，改变data['title']的值，就会触发title的setter，从而通知所有的订阅者。")]),t._v(" "),s("h3",{attrs:{id:"监听数组变化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#监听数组变化"}},[t._v("#")]),t._v(" 监听数组变化")]),t._v(" "),s("h4",{attrs:{id:"无法监控每个数组元素"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#无法监控每个数组元素"}},[t._v("#")]),t._v(" 无法监控每个数组元素")]),t._v(" "),s("p",[t._v("如果让我们自己实现监听数组的变化，我们可能会想到用object.defineProperty去遍历数组每个元素并设置setter，但是vue源码里面却不是这样写的，因为对每一个数组元素defineProperty带来代码本身的复杂度增加和代码执行效率的降低。")]),t._v(" "),s("blockquote",[s("p",[t._v("感谢Ma63d"),s("a",{attrs:{href:"https://github.com/youngwind/blog/issues/85#issuecomment-301400937",target:"_blank",rel:"noopener noreferrer"}},[t._v("这篇文章下面的的评论"),s("OutboundLink")],1),t._v("，对此解释得很详细，这里也就不再赘述。")])]),t._v(" "),s("h4",{attrs:{id:"变异数组方法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变异数组方法"}},[t._v("#")]),t._v(" 变异数组方法")]),t._v(" "),s("p",[t._v("既然无法通过defineProperty监控数组的每个元素，我们可以重写数组的方法(push, pop, shift, unshift, splice, sort, reverse)来改变数组。")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/list.html#",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue文档"),s("OutboundLink")],1),t._v("中是这样写的：")]),t._v(" "),s("blockquote",[s("p",[t._v("Vue 包含一组观察数组的变异方法，所以它们也将会触发视图更新。这些方法如下：")]),t._v(" "),s("ul",[s("li",[t._v("push()")]),t._v(" "),s("li",[t._v("pop()")]),t._v(" "),s("li",[t._v("shift()")]),t._v(" "),s("li",[t._v("unshift()")]),t._v(" "),s("li",[t._v("splice()")]),t._v(" "),s("li",[t._v("sort()")]),t._v(" "),s("li",[t._v("reverse()")])])]),t._v(" "),s("p",[t._v("下面是 "),s("a",{attrs:{href:"https://github.com/youngwind/blog/issues/85",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue早期源码学习系列之二：如何监听一个数组的变化"),s("OutboundLink")],1),t._v(" 中的实例代码")]),t._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("const aryMethods = ['push', 'pop', 'shift', 'unshift', 'splice', 'sort', 'reverse'];\nconst arrayAugmentations = [];\n\naryMethods.forEach((method)=> {\n\n    // 这里是原生Array的原型方法\n    let original = Array.prototype[method];\n\n   // 将push, pop等封装好的方法定义在对象arrayAugmentations的属性上\n   // 注意：是属性而非原型属性\n    arrayAugmentations[method] = function () {\n        console.log('我被改变啦!');\n\n        // 调用对应的原生方法并返回结果\n        return original.apply(this, arguments);\n    };\n\n});\n\nlet list = ['a', 'b', 'c'];\n// 将我们要监听的数组的原型指针指向上面定义的空数组对象\n// 别忘了这个空数组的属性上定义了我们封装好的push等方法\nlist.__proto__ = arrayAugmentations;\nlist.push('d');  // 我被改变啦！ 4\n\n// 这里的list2没有被重新定义原型指针，所以就正常输出\nlet list2 = ['a', 'b', 'c'];\nlist2.push('d');  // 4\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br"),s("span",{staticClass:"line-number"},[t._v("7")]),s("br"),s("span",{staticClass:"line-number"},[t._v("8")]),s("br"),s("span",{staticClass:"line-number"},[t._v("9")]),s("br"),s("span",{staticClass:"line-number"},[t._v("10")]),s("br"),s("span",{staticClass:"line-number"},[t._v("11")]),s("br"),s("span",{staticClass:"line-number"},[t._v("12")]),s("br"),s("span",{staticClass:"line-number"},[t._v("13")]),s("br"),s("span",{staticClass:"line-number"},[t._v("14")]),s("br"),s("span",{staticClass:"line-number"},[t._v("15")]),s("br"),s("span",{staticClass:"line-number"},[t._v("16")]),s("br"),s("span",{staticClass:"line-number"},[t._v("17")]),s("br"),s("span",{staticClass:"line-number"},[t._v("18")]),s("br"),s("span",{staticClass:"line-number"},[t._v("19")]),s("br"),s("span",{staticClass:"line-number"},[t._v("20")]),s("br"),s("span",{staticClass:"line-number"},[t._v("21")]),s("br"),s("span",{staticClass:"line-number"},[t._v("22")]),s("br"),s("span",{staticClass:"line-number"},[t._v("23")]),s("br"),s("span",{staticClass:"line-number"},[t._v("24")]),s("br"),s("span",{staticClass:"line-number"},[t._v("25")]),s("br"),s("span",{staticClass:"line-number"},[t._v("26")]),s("br"),s("span",{staticClass:"line-number"},[t._v("27")]),s("br"),s("span",{staticClass:"line-number"},[t._v("28")]),s("br")])]),s("p",[t._v("对__proto__不熟悉的小伙伴可以去看一下"),s("a",{attrs:{href:"http://www.cnblogs.com/wangfupeng1988/p/3977924.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("王福明的博客"),s("OutboundLink")],1),t._v("，写的很好。")]),t._v(" "),s("h4",{attrs:{id:"变异数组方法的缺陷"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#变异数组方法的缺陷"}},[t._v("#")]),t._v(" 变异数组方法的缺陷")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/list.html#",target:"_blank",rel:"noopener noreferrer"}},[t._v("vue文档中变异数组方法的缺陷"),s("OutboundLink")],1)]),t._v(" "),s("blockquote",[s("p",[t._v("由于 JavaScript 的限制， Vue 不能检测以下变动的数组：")]),t._v(" "),s("ol",[s("li",[t._v("当你利用索引直接设置一个项时，例如： vm.items[indexOfItem] = newValue")]),t._v(" "),s("li",[t._v("当你修改数组的长度时，例如： vm.items.length = newLength")])])]),t._v(" "),s("p",[t._v("同时文档中也介绍了如何解决上面这两个问题。")]),t._v(" "),s("h2",{attrs:{id:"最后"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#最后"}},[t._v("#")]),t._v(" 最后")]),t._v(" "),s("p",[t._v("以上是自己对vue一些基本原理的理解，当然还有很多不足的地方，欢迎指正。本来自己也是为了应付面试才去学习vue框架的基本原理，但是简单学习了这些vue基本的原理后，让我明白通过深入学习框架原理，可以有效避开一些自己以后会遇到的坑，所以，有时间的话自己以后还是会去看看框架的基本原理。")])])}),[],!1,null,null,null);e.default=n.exports}}]);