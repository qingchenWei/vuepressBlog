(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{533:function(t,r,s){"use strict";s.r(r);var T=s(4),v=Object(T.a)({},(function(){var t=this,r=t.$createElement,s=t._self._c||r;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("Abstract")]),t._v(" "),s("ol",[s("li",[t._v("超文本传输​​协议（HTTP）")]),t._v(" "),s("li",[t._v("HTTP Strict Transport Security (通常简称为HSTS) 是一个安全功能，它告诉浏览器只能通过HTTPS访问当前资源, 禁止HTTP方式.")]),t._v(" "),s("li",[t._v("SPDY")]),t._v(" "),s("li",[t._v("二进制、复用、压缩、服务端推送")])])]),t._v(" "),s("h2",{attrs:{id:"http"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http"}},[t._v("#")]),t._v(" http")]),t._v(" "),s("p",[s("strong",[t._v("超文本传输协议")]),t._v("（HTTP）是用于传输诸如HTML的超媒体文档的应用层协议。它被设计用于Web浏览器和Web服务器之间的通信，但它也可以用于其他目的。 HTTP遵循经典的客户端-服务端模型，客户端打开一个连接以发出请求，然后等待它收到服务器端响应。 HTTP是无状态协议，意味着服务器不会在两个请求之间保留任何数据（状态）。虽然通常基于TCP / IP层，但可以在任何可靠的传输层上使用;也就是说，一个不会静默丢失消息的协议，如UDP。")]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"http1-0-时代"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http1-0-时代"}},[t._v("#")]),t._v(" http1.0 时代")]),t._v(" "),s("p",[t._v("影响一个 HTTP 网络请求的因素主要有两个：带宽和延迟。")]),t._v(" "),s("ul",[s("li",[s("strong",[t._v("带宽")]),t._v("：如果说我们还停留在拨号上网的阶段，带宽可能会成为一个比较严重影响请求的问题，但是现在网络基础建设已经使得带宽得到极大的提升，我们不再会担心由带宽而影响网速，那么就只剩下延迟了。")]),t._v(" "),s("li",[s("strong",[t._v("延迟")]),t._v("：\n"),s("ul",[s("li",[s("strong",[t._v("浏览器阻塞（HOL blocking）")]),t._v("：浏览器会因为一些原因阻塞请求。浏览器对于同一个域名，同时只能有 4 个连接（这个根据浏览器内核不同可能会有所差异），超过浏览器最大连接数限制，后续请求就会被阻塞。")]),t._v(" "),s("li",[t._v("DNS 查询（DNS Lookup）：浏览器需要知道目标服务器的 IP 才能建立连接。将域名解析为 IP 的这个系统就是 DNS。这个通常可以利用DNS缓存结果来达到减少这个时间的目的。")]),t._v(" "),s("li",[s("strong",[t._v("建立连接（Initial connection）")]),t._v("：HTTP 是基于 TCP 协议的，浏览器最快也要在第三次握手时才能捎带 HTTP 请求报文，达到真正的建立连接，但是这些连接无法复用会导致每次请求都经历三次握手和慢启动。三次握手在高延迟的场景下影响较明显，慢启动则对文件类大请求影响较大。")])])])]),t._v(" "),s("h3",{attrs:{id:"主要区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#主要区别"}},[t._v("#")]),t._v(" 主要区别")]),t._v(" "),s("p",[t._v("HTTP1.0最早在网页中使用是在1996年，那个时候只是使用一些较为简单的网页上和网络请求上，而HTTP1.1则在1999年才开始广泛应用于现在的各大浏览器网络请求中，同时HTTP1.1也是当前使用最为广泛的HTTP协议。 主要区别主要体现在：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("缓存处理")]),t._v("，在HTTP1.0中主要使用header里的If-Modified-Since,Expires来做为缓存判断的标准，HTTP1.1则引入了更多的缓存控制策略例如Entity tag，If-Unmodified-Since, If-Match, If-None-Match等更多可供选择的缓存头来控制缓存策略。")]),t._v(" "),s("li",[s("strong",[t._v("带宽优化及网络连接的使用")]),t._v("，HTTP1.0中，存在一些浪费带宽的现象，例如客户端只是需要某个对象的一部分，而服务器却将整个对象送过来了，并且不支持断点续传功能，HTTP1.1则在请求头引入了range头域，它允许只请求资源的某个部分，即返回码是206（Partial Content），这样就方便了开发者自由的选择以便于充分利用带宽和连接。")]),t._v(" "),s("li",[s("strong",[t._v("错误通知的管理")]),t._v("，在HTTP1.1中新增了24个错误状态响应码，如409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除。")]),t._v(" "),s("li",[s("strong",[t._v("Host头处理")]),t._v("，在HTTP1.0中认为每台服务器都绑定一个唯一的IP地址，因此，请求消息中的URL并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个IP地址。HTTP1.1的请求消息和响应消息都应支持Host头域，且请求消息中如果没有Host头域会报告一个错误（400 Bad Request）。")]),t._v(" "),s("li",[s("strong",[t._v("长连接")]),t._v("，HTTP 1.1支持长连接（PersistentConnection）和请求的流水线（Pipelining）处理，在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟，在HTTP1.1中默认开启Connection： keep-alive，一定程度上弥补了HTTP1.0每次请求都要创建连接的缺点。")])]),t._v(" "),s("hr"),t._v(" "),s("h2",{attrs:{id:"https"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https"}},[t._v("#")]),t._v(" Https")]),t._v(" "),s("p",[s("strong",[t._v("HTTP Strict Transport Security")]),t._v(" (通常简称为HSTS) 是一个安全功能，它告诉浏览器只能通过HTTPS访问当前资源, 禁止HTTP方式.")]),t._v(" "),s("p",[t._v("Strict Transport Security解决了这个问题；只要你通过HTTPS请求访问银行网站，并且银行网站配置好Strict Transport Security，你的浏览器知道自动使用HTTPS请求，这可以阻止黑客的中间人攻击的把戏。")]),t._v(" "),s("h3",{attrs:{id:"启用-strict-transport-security"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#启用-strict-transport-security"}},[t._v("#")]),t._v(" 启用 Strict Transport Security")]),t._v(" "),s("p",[t._v("开启HSTS只需要当通过HTTPS方式访问你的网站时，返回 Strict-Transport-SecurityHTTP 头信息: Strict-Transport-Security: max-age=expireTime [; includeSubdomains]")]),t._v(" "),s("hr"),t._v(" "),s("h3",{attrs:{id:"https与http的一些区别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#https与http的一些区别"}},[t._v("#")]),t._v(" HTTPS与HTTP的一些区别")]),t._v(" "),s("ol",[s("li",[t._v("HTTPS协议需要到CA申请证书，一般免费证书很少，需要交费。")]),t._v(" "),s("li",[t._v("HTTP协议运行在TCP之上，所有传输的内容都是明文，HTTPS运行在SSL/TLS之上，SSL/TLS运行在TCP之上，所有传输的内容都经过加密的。")]),t._v(" "),s("li",[t._v("HTTP和HTTPS使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。")]),t._v(" "),s("li",[t._v("HTTPS可以有效的防止运营商劫持，解决了防劫持的一个大问题。")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s1.ax1x.com/2020/09/09/w8wU00.png",alt:"w8wU00.png"}})]),t._v(" "),s("h3",{attrs:{id:"使用spdy加快你的网站速度"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用spdy加快你的网站速度"}},[t._v("#")]),t._v(" 使用SPDY加快你的网站速度")]),t._v(" "),s("blockquote",[s("p",[t._v("2012年google如一声惊雷提出了SPDY的方案，大家才开始从正面看待和解决老版本HTTP协议本身的问题，SPDY可以说是综合了HTTPS和HTTP两者有点于一体的传输协议，主要解决：")])]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("降低延迟")]),t._v("，针对HTTP高延迟的问题，SPDY优雅的采取了多路复用（multiplexing）。多路复用通过多个请求stream共享一个tcp连接的方式，解决了HOL blocking的问题，降低了延迟同时提高了带宽的利用率。")]),t._v(" "),s("li",[s("strong",[t._v("请求优先级")]),t._v("（request prioritization）。多路复用带来一个新的问题是，在连接共享的基础之上有可能会导致关键请求被阻塞。SPDY允许给每个request设置优先级，这样重要的请求就会优先得到响应。比如浏览器加载首页，首页的html内容应该优先展示，之后才是各种静态资源文件，脚本文件等加载，这样可以保证用户能第一时间看到网页内容。")]),t._v(" "),s("li",[s("strong",[t._v("header压缩")]),t._v("。前面提到HTTP1.x的header很多时候都是重复多余的。选择合适的压缩算法可以减小包的大小和数量。")]),t._v(" "),s("li",[s("strong",[t._v("基于HTTPS的加密协议传输")]),t._v("，大大提高了传输数据的可靠性。")]),t._v(" "),s("li",[s("strong",[t._v("服务端推送（server push）")]),t._v("，采用了SPDY的网页，例如我的网页有一个sytle.css的请求，在客户端收到sytle.css数据的同时，服务端会将sytle.js的文件推送给客户端，当客户端再次尝试获取sytle.js时就可以直接从缓存中获取到，不用再发请求了。SPDY构成图：")])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s1.ax1x.com/2020/09/09/w8wNmq.png",alt:"w8wNmq.png"}})]),t._v(" "),s("blockquote",[s("p",[t._v("SPDY位于HTTP之下，TCP和SSL之上，这样可以轻松兼容老版本的HTTP协议(将HTTP1.x的内容封装成一种新的frame格式)，同时可以使用已有的SSL功能。")])]),t._v(" "),s("h2",{attrs:{id:"http2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2"}},[t._v("#")]),t._v(" HTTP2")]),t._v(" "),s("p",[t._v("HTTP2.0可以说是SPDY的升级版（其实原本也是基于SPDY设计的），但是，HTTP2.0 跟 SPDY 仍有不同的地方，主要是以下两点")]),t._v(" "),s("p",[t._v("● HTTP2.0 支持明文 HTTP 传输，而 SPDY 强制使用 HTTPS")]),t._v(" "),s("p",[t._v("● HTTP2.0 消息头的压缩算法采用 HPACK，而非 SPDY 采用的 DEFLATE")]),t._v(" "),s("h3",{attrs:{id:"http2-新特性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#http2-新特性"}},[t._v("#")]),t._v(" http2 新特性")]),t._v(" "),s("p",[t._v("● "),s("strong",[t._v("新的二进制格式（Binary Format）")]),t._v("，HTTP1.x的解析是基于文本。基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认0和1的组合。基于这种考虑HTTP2.0的协议解析决定采用二进制格式，实现方便且健壮。")]),t._v(" "),s("p",[t._v("● "),s("strong",[t._v("多路复用（MultiPlexing）")]),t._v("，即连接共享，即每一个request都是是用作连接共享机制的。一个request对应一个id，这样一个连接上可以有多个request，每个连接的request可以随机的混杂在一起，接收方可以根据request的 id将request再归属到各自不同的服务端请求里面。多路复用原理图：")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://s1.ax1x.com/2020/09/09/w8wa7V.png",alt:"w8wa7V.png"}})]),t._v(" "),s("p",[t._v("●"),s("strong",[t._v("header压缩")]),t._v("，如上文中所言，对前面提到过HTTP1.x的header带有大量信息，而且每次都要重复发送，HTTP2.0使用encoder来减少需要传输的header大小，通讯双方各自cache一份header fields表，既避免了重复header的传输，又减小了需要传输的大小。")]),t._v(" "),s("p",[t._v("● "),s("strong",[t._v("服务端推送（server push）")]),t._v("，同SPDY一样，HTTP2.0也具有server push功能。目前，有大多数网站已经启用HTTP2.0，例如YouTuBe，淘宝网等网站，利用chrome控制台可以查看是否启用H2：")])])}),[],!1,null,null,null);r.default=v.exports}}]);